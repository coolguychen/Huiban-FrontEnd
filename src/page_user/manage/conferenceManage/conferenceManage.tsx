import React, { useState } from "react"
import { Conference } from "../../conference/conferenceType";
import { Link } from "react-router-dom";
import { Button, Col, DatePicker, Form, Input, InputNumber, Modal, Popconfirm, Row, Select, Space, Table } from 'antd';
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';




const conferences: Conference[] = [
    {
        conferenceId: "CIKM2024",
        title: "CIKM",
        fullTitle: "ACM International Conference on Information and Knowledge Management 2024",
        ccfRank: "B",
        sub: "Êï∞ÊçÆÂ∫ì/Êï∞ÊçÆÊåñÊéò/ÂÜÖÂÆπÊ£ÄÁ¥¢",
        year: 2024,
        dblpLink: "", // Â°´ÂÖ•ÂØπÂ∫îÈìæÊé•
        mainpageLink: "https://cikm2024.org/",
        place: "Boise, Idaho, USA",
        abstractDeadline: new Date("2024-05-13"),
        paperDeadline: new Date("2024-07-16"),
        startTime: new Date("2024-10-21"),
        endTime: new Date("2024-11-21"),
        acceptedRate: 0.22, // Ê∑ªÂä†Êé•ÂèóÁéá
        isPostponed: false
    },
];

const { TextArea } = Input;
const { Option } = Select;


const ConferenceManage: React.FC = () => {

    //ÂàÜÈ°µÈªòËÆ§ÂÄºÔºåËÆ∞Âæóimport useState
    const [pageOption, setPageOption] = useState({
        pageNo: 1, ¬†//ÂΩìÂâçÈ°µ‰∏∫1
        pageSize: 10, //‰∏ÄÈ°µ10Ë°å
    })

    //ÂàÜÈ°µÈÖçÁΩÆ
    const paginationProps = {
        current: pageOption.pageNo,
        pageSize: pageOption.pageSize,
        onChange: (current, size) => paginationChange(current, size)
    }

    //ÂΩìÁøªÈ°µÊó∂ÔºåÊîπÂèòÂΩìÂâç‰∏∫Á¨¨currentÈ°µÔºåcurrentÂíåsizeËøô‰∏§ÂèÇÊï∞ÊòØonChange APIËá™Â∏¶ÁöÑÔºå‰ºöÂ∏Æ‰Ω†ÁÆóÂá∫Êù•‰Ω†Áé∞Âú®Âú®Á¨¨Âá†È°µÔºåËøô‰∏ÄÈ°µÊúâÂ§öÂ∞ëË°åÊï∞ÊçÆ„ÄÇ
    const paginationChange = async (current, size) => {
        //ÂâçÈù¢Áî®Âà∞useState
        setPageOption({
            pageNo: current, //ÂΩìÂâçÊâÄÂú®È°µÈù¢
            pageSize: size, ¬†//‰∏ÄÈ°µÊúâÂá†Ë°å
        })
    }

    const [deleteModalVisible, setDeleteModalVisible] = useState(false);
    const [recordToDelete, setRecordToDelete] = useState(null);

    const handleDelete = () => {
        // Âú®ËøôÈáåË∞ÉÁî®Âà†Èô§Êé•Âè£
        console.log('Ë∞ÉÁî®Âà†Èô§Êé•Âè£');
        setDeleteModalVisible(false);
    };

    const handleEdit = () => {
        console.log('ÂºπÂá∫ÁºñËæëÁöÑË°®ÂçïÔºü');
    }

    const [form] = Form.useForm();
    const [isModalVisible, setIsModalVisible] = useState(false);

    const handleAddConference = () => {
        setIsModalVisible(true);
    };

    const handleCancel = () => {
        setIsModalVisible(false);
    };

    const handleSubmit = (values) => {
        onCreate(values);
        form.resetFields();
    };


    // ÂÆö‰πâÂàó
    const columns = [
        {
            title: 'ÁÆÄÁß∞',
            dataIndex: 'title',
            key: 'title',
            render: (text, record) => (
                <Link to={`/conferenceDetail/${record.conferenceId}`} style={{ color: 'blue', fontWeight: 'bold' }}>
                    {text}
                </Link>
            ),
        },
        {
            title: 'ÂÖ®Áß∞',
            dataIndex: 'fullTitle',
            key: 'fullTitle',
            render: (text, record) => <a href={record.mainpageLink}>{text}</a> //ÁÇπÂáªÂÖ®Áß∞ Ë∑≥ËΩ¨Âà∞‰∏ªÈ°µ
        },
        {
            title: 'Á±ªÂûã',
            dataIndex: 'sub',
            key: 'sub',
        },
        {
            title: 'CCF',
            dataIndex: 'ccfRank',
            key: 'ccfRank',
            // ÊçÆ‰∏çÂêåÁöÑÊù°‰ª∂Ê∏≤Êüì‰∏∫‰∏çÂêåÈ¢úËâ≤ÔºåÂêåÊó∂‰ΩøËØ•Ê†áÁ≠æÂ∏¶ÊúâÂúÜËßí
            render: (ccfRank) => {
                if (!ccfRank) return null; // Â¶ÇÊûú ccfRank ‰∏∫Á©∫ÔºåÂàô‰∏∫N

                let backgroundColor;
                switch (ccfRank) {
                    case 'A':
                        backgroundColor = 'pink';
                        break;
                    case 'B':
                        backgroundColor = 'gold';
                        break;
                    case 'C':
                        backgroundColor = 'honeydew';
                        break;
                    default:
                        backgroundColor = 'grey';
                        ccfRank = 'N'
                }
                return (
                    <span style={{ backgroundColor, padding: '5px', borderRadius: '5px' }}>{ccfRank}</span>
                );
            },
            filters: [
                {
                    text: 'A',
                    value: 'A',
                },
                {
                    text: 'B',
                    value: 'B',
                },
                {
                    text: 'C',
                    value: 'C',
                },
            ],
            onFilter: (value, record) => record.ccfRank === value,

        },
        {
            title: 'Âπ¥‰ªΩ',
            dataIndex: 'year',
            key: 'year',
            render: (year) => {
                let backgroundColor;
                if (year < 2024) {
                    backgroundColor = 'LightGrey'
                }

                else if (year = 2024) {
                    backgroundColor = 'LightCyan'
                }
                else {
                    backgroundColor = 'Lavender'
                }

                return <span style={{ backgroundColor, padding: '5px', borderRadius: '8px' }}>{year}</span>
            }
        },
        {
            title: 'Âª∂Êúü',
            dataIndex: 'isPostponed',
            key: 'isPostponed',
            render: (isPostponed) => {
                if (isPostponed) { // Â¶ÇÊûúÂª∂Êúü
                    return <span style={{ backgroundColor: 'red', padding: '5px', borderRadius: '5px' }}>Âª∂Êúü</span>
                }
            }
        },
        {
            title: 'ÊëòË¶ÅÊà™Ê≠¢Êó•Êúü',
            dataIndex: 'abstractDeadline',
            key: 'abstractDeadline',
            render: date => <span>{date.toDateString()}</span>,
        },
        {
            title: 'ÂÖ®ÊñáÊà™Ê≠¢Êó•Êúü',
            dataIndex: 'paperDeadline',
            key: 'paperDeadline',
            render: date => <span>{date.toDateString()}</span>,
        },
        {
            title: 'ÂºÄ‰ºöÊó∂Èó¥',
            dataIndex: 'startTime',
            key: 'startTime',
            render: date => <span>{date.toDateString()}</span>,
        },
        {
            title: 'Âú∞ÁÇπ',
            dataIndex: 'place',
            key: 'place',
            render: place => <span>üìç{place}</span>,
        },
        {
            title: 'Êé•ÂèóÁéá',
            dataIndex: 'acceptedRate',
            key: 'acceptedRate',
        },
        {
            title: 'Êìç‰Ωú',
            key: 'action',
            render: (text, record) => (
                <Space>
                    <EditOutlined style={{ color: 'CornflowerBlue' }} onClick={() => handleEdit()} />
                    <Popconfirm
                        title="Á°ÆÂÆöË¶ÅÂà†Èô§ÂêóÔºü"
                        onConfirm={() => { setRecordToDelete(record); setDeleteModalVisible(true); }} // Á°ÆÂÆöÂàôË∞ÉÁî®Âà†Èô§ÁöÑÊé•Âè£
                        okText="Á°ÆËÆ§"
                        cancelText="ÂèñÊ∂à"
                    >
                        <DeleteOutlined style={{ color: 'red' }} />
                    </Popconfirm>


                </Space>
            ),
        },
    ];

    return (
        <div>
            <h3>CCF‰ºöËÆÆÁÆ°ÁêÜ</h3>
            <Button className="addRecord" type="primary" ghost onClick={handleAddConference}>Ê∑ªÂä†‰ºöËÆÆ</Button>
            <Table columns={columns} dataSource={conferences} style={{ margin: 16 }} pagination={paginationProps} />
            <Modal title="Ê∑ªÂä†‰ºöËÆÆ"
                open={isModalVisible}
                okText="Ê∑ªÂä†"
                cancelText="ÂèñÊ∂à"
                onOk={() => {
                    form.validateFields()
                        .then((values) => {
                            form.resetFields();
                            handleSubmit(values);
                        })
                        .catch((info) => {
                            console.log('Validation failed:', info);
                        });
                }}
                onCancel={handleCancel}
                >
                {/* Your meeting form component goes here */}
                <Form form={form} layout="vertical">

                    <Row gutter={16}>
                        <Col span={6}>
                            <Form.Item name="title" label="ÁÆÄÁß∞" rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•‰ºöËÆÆÊ†áÈ¢ò' }]}>
                                <Input />
                            </Form.Item>
                        </Col>
                        <Col span={6}>
                            <Form.Item name="year" label="Âπ¥‰ªΩ" rules={[{ required: true }]}>
                                <DatePicker picker="year" />
                            </Form.Item>
                        </Col>
                        <Col span={6}>
                            <Form.Item name="session" label="Â±äÊï∞" rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•‰ºöËÆÆÊ†áÈ¢ò' }]}>
                                <InputNumber />
                            </Form.Item>
                        </Col>
                        <Col span={6}>
                            <Form.Item name="ccfRank" label="CCF ÊéíÂêç" rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©CCFÊéíÂêç' }]}>
                                <Select>
                                    <Option value="">ËØ∑ÈÄâÊã©</Option>
                                    <Option value="A">A</Option>
                                    <Option value="B">B</Option>
                                    <Option value="C">C</Option>
                                    <Option value="null">NULL</Option>
                                </Select>
                            </Form.Item>
                        </Col>
                    </Row>
                    <Form.Item name="fullTitle" label="ÂÖ®Áß∞">
                        <Input />
                    </Form.Item>

                    <Form.Item name="dblplink" label="DBLPÈìæÊé•">
                        <Input />
                    </Form.Item>
                    <Form.Item name="mainpagelink" label="‰∏ªÈ°µÈìæÊé•">
                        <Input />
                    </Form.Item>
                    <Form.Item name="place" label="ÂºÄ‰ºöÂú∞ÂùÄ">
                        <Input />
                    </Form.Item>
                    <Row gutter={16}>
                        <Col span={12}>
                            <Form.Item name="abstractDeadline" label="ÊëòË¶ÅÊà™Ê≠¢Êó∂Èó¥">
                                <DatePicker showTime />
                            </Form.Item>
                        </Col>
                        <Col span={12}>
                            <Form.Item name="paperDeadline" label="ËÆ∫ÊñáÊà™Ê≠¢Êó∂Èó¥">
                                <DatePicker showTime />
                            </Form.Item>
                        </Col>
                    </Row>
                    <Row gutter={16}>
                        <Col span={12}>
                            <Form.Item name="startTime" label="‰ºöËÆÆÂºÄÂßãÊó∂Èó¥">
                                <DatePicker showTime />
                            </Form.Item>
                        </Col>
                        <Col span={12}>
                            <Form.Item name="endTime" label="‰ºöËÆÆÁªìÊùüÊó∂Èó¥">
                                <DatePicker showTime />
                            </Form.Item>
                        </Col>
                    </Row>
                    <Form.Item name="topicDetails" label="‰ºöËÆÆËØ¶ÊÉÖ">
                        <TextArea rows={5} />
                    </Form.Item>

                </Form>
            </Modal>
        </div>
    )

}


export default ConferenceManage