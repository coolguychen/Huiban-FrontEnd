//TODOÔºö Â±ïÁ§∫ÂÖ®ÈÉ®CCF‰ºöËÆÆ
import React, { useEffect, useRef, useState } from 'react';
import { Input, InputRef, Space, Button, Table, Form, DatePicker, message, Tag } from 'antd';
import { Conference } from './conferenceType'
import { SearchOutlined } from '@ant-design/icons';
import { Link } from 'react-router-dom';
import { ColumnType, FilterConfirmProps } from 'antd/es/table/interface';
import Highlighter from 'react-highlight-words';
import { useSelector } from 'react-redux';
import axios from 'axios';
import moment from 'moment';


// type DataIndex = keyof Conference;

const ConferenceInfo: React.FC = () => {
    const userLogin = useSelector((state: any) => state.userLogin)
    console.log(userLogin)
    const token = userLogin.userInfo.data.token;
    const [conferences, setConferences] = useState<Conference[]>([]);
    const [initialConferences, setInitial] = useState<Conference[]>([]);

    console.log(token)
    useEffect(() => {
        axios.get('http://124.220.14.106:9001/api/conferences/list', {
            headers: {
                'Content-type': 'application/json; charset=UTF-8',
                'Authorization': "Bearer " + token
            },
        })
            .then(response => {
                console.log(response);
                let data = response.data;
                console.log(data)
                let records = data.data;
                console.log(records)
                let conferenceTmp: Conference[] = [];
                for (let i = 0; i < records.length; i++) {
                    conferenceTmp.push({
                        conferenceId: records[i].conferenceId,
                        fullTitle: records[i].fullTitle,
                        ccfRank: records[i].ccfRank,
                        sub: records[i].sub,
                        mainpageLink: records[i].mainpageLink,
                        abstractDeadline: records[i].abstractDeadline, //ÊëòË¶ÅDDL
                        paperDeadline: records[i].paperDeadline,//ÂÖ®ÊñáDDL
                        startTime: records[i].startTime, //ÂºÄÂßãÊó∂Èó¥'
                        endTime: records[i].endTime,  //ÁªìÊùüÊó∂Èó¥
                        acceptedRate: records[i].acceptedRate, //Êé•ÂèóÁéá
                        place: records[i].place,
                        isPostponed: records[i].postponed// ÊòØÂê¶Âª∂Êúü
                    });
                }
                setConferences(conferenceTmp);
                setInitial(conferenceTmp)
                console.log(conferenceTmp)
            })
            .catch(error => {
                console.log('Error', error.message);
            });
    }, []);

    //ÂàÜÈ°µÈªòËÆ§ÂÄºÔºåËÆ∞Âæóimport useState
    const [pageOption, setPageOption] = useState({
        pageNo: 1, ¬†//ÂΩìÂâçÈ°µ‰∏∫1
        pageSize: 10, //‰∏ÄÈ°µ10Ë°å
    })

    //ÂàÜÈ°µÈÖçÁΩÆ
    const paginationProps = {
        current: pageOption.pageNo,
        pageSize: pageOption.pageSize,
        onChange: (current, size) => paginationChange(current, size)
    }

    //ÂΩìÁøªÈ°µÊó∂ÔºåÊîπÂèòÂΩìÂâç‰∏∫Á¨¨currentÈ°µÔºåcurrentÂíåsizeËøô‰∏§ÂèÇÊï∞ÊòØonChange APIËá™Â∏¶ÁöÑÔºå‰ºöÂ∏Æ‰Ω†ÁÆóÂá∫Êù•‰Ω†Áé∞Âú®Âú®Á¨¨Âá†È°µÔºåËøô‰∏ÄÈ°µÊúâÂ§öÂ∞ëË°åÊï∞ÊçÆ„ÄÇ
    const paginationChange = async (current, size) => {
        //ÂâçÈù¢Áî®Âà∞useState
        setPageOption({
            pageNo: current, //ÂΩìÂâçÊâÄÂú®È°µÈù¢
            pageSize: size, ¬†//‰∏ÄÈ°µÊúâÂá†Ë°å
        })
    }

    const [searchText, setSearchText] = useState('');
    const [searchedColumn, setSearchedColumn] = useState('');

    const handleSearch = (selectedKeys, confirm, dataIndex) => {
        confirm();
        setSearchText(selectedKeys[0]);
        setSearchedColumn(dataIndex);
    };

    const handleReset = clearFilters => {
        clearFilters();
        setSearchText('');
    };

    const getColumnSearchProps = dataIndex => ({
        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
            <div style={{ padding: 8 }}>
                <Input
                    placeholder={`ÊêúÁ¥¢ ${dataIndex}`}
                    value={selectedKeys[0]}
                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}
                    onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
                    style={{ marginBottom: 8, display: 'block' }}
                />
                <Space>
                    <Button
                        type="primary"
                        onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}
                        icon={<SearchOutlined />}
                        size="small"
                        style={{ width: 90 }}
                    >
                        ÊêúÁ¥¢
                    </Button>
                    <Button onClick={() => handleReset(clearFilters)} size="small" style={{ width: 90 }}>
                        ÈáçÁΩÆ
                    </Button>
                </Space>
            </div>
        ),
        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,
        onFilter: (value, record) =>
            record[dataIndex]
                ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())
                : '',
        render: text =>
            searchedColumn === dataIndex ? (
                <Highlighter
                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}
                    searchWords={[searchText]}
                    autoEscape
                    textToHighlight={text ? text.toString() : ''}
                />
            ) : (
                text
            ),
    });

    // ÂÆö‰πâÂàó
    const conferenceCols = [
        {
            title: 'üìôÁÆÄÁß∞',
            dataIndex: 'conferenceId',
            key: 'conferenceId',
            align: 'center',
            ...getColumnSearchProps('conferenceId'), // Ê∑ªÂä†ÊêúÁ¥¢
            render: (text, record) => (
                <Link to={`/conferenceDetail/${record.conferenceId}`} style={{ color: 'blue', fontWeight: 'bold' }}>
                    <Highlighter
                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}
                        searchWords={[searchText]}
                        autoEscape
                        textToHighlight={text ? text.toString() : ''}
                    />
                </Link>
            ),
        },
        {
            title: 'üìñÂÖ®Áß∞',
            dataIndex: 'fullTitle',
            key: 'fullTitle',
            align: 'center',
            ...getColumnSearchProps('fullTitle'), // Ê∑ªÂä†ÊêúÁ¥¢
            render: (text, record) => (
                <a href={record.mainpageLink} target='_blank'>
                    <Highlighter
                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}
                        searchWords={[searchText]}
                        autoEscape
                        textToHighlight={text ? text.toString() : ''}
                    />
                </a>
            ),
        },
        {
            title: 'üè∑Ô∏èÁ±ªÂûã',
            dataIndex: 'sub',
            key: 'sub',
            align: 'center',
            filters: [
                {
                    text: 'ËÆ°ÁÆóÊú∫‰ΩìÁ≥ªÁªìÊûÑ/Âπ∂Ë°å‰∏éÂàÜÂ∏ÉËÆ°ÁÆó/Â≠òÂÇ®Á≥ªÁªü',
                    value: 'ËÆ°ÁÆóÊú∫‰ΩìÁ≥ªÁªìÊûÑ/Âπ∂Ë°å‰∏éÂàÜÂ∏ÉËÆ°ÁÆó/Â≠òÂÇ®Á≥ªÁªü'
                },
                {
                    text: 'ËÆ°ÁÆóÊú∫ÁΩëÁªú',
                    value: 'ËÆ°ÁÆóÊú∫ÁΩëÁªú',
                },
                {
                    text: 'ÁΩëÁªú‰∏é‰ø°ÊÅØÂÆâÂÖ®',
                    value: 'ÁΩëÁªú‰∏é‰ø°ÊÅØÂÆâÂÖ®',
                },
                {
                    text: 'ËΩØ‰ª∂Â∑•Á®ã/Á≥ªÁªüËΩØ‰ª∂/Á®ãÂ∫èËÆæËÆ°ËØ≠Ë®Ä',
                    value: 'ËΩØ‰ª∂Â∑•Á®ã/Á≥ªÁªüËΩØ‰ª∂/Á®ãÂ∫èËÆæËÆ°ËØ≠Ë®Ä',
                },
                {
                    text: 'Êï∞ÊçÆÂ∫ì/Êï∞ÊçÆÊåñÊéò/‰ø°ÊÅØÊ£ÄÁ¥¢',
                    value: 'Êï∞ÊçÆÂ∫ì/Êï∞ÊçÆÊåñÊéò/‰ø°ÊÅØÊ£ÄÁ¥¢',
                },
                {
                    text: 'ËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÁêÜËÆ∫',
                    value: 'ËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÁêÜËÆ∫',
                },
                {
                    text: 'ËÆ°ÁÆóÊú∫ÂõæÂΩ¢Â≠¶‰∏éÂ§öÂ™í‰Ωì',
                    value: 'ËÆ°ÁÆóÊú∫ÂõæÂΩ¢Â≠¶‰∏éÂ§öÂ™í‰Ωì',
                },
                {
                    text: '‰∫∫Â∑•Êô∫ËÉΩ',
                    value: '‰∫∫Â∑•Êô∫ËÉΩ',
                },
                {
                    text: '‰∫∫Êú∫‰∫§‰∫í‰∏éÊôÆÈÄÇËÆ°ÁÆó',
                    value: '‰∫∫Êú∫‰∫§‰∫í‰∏éÊôÆÈÄÇËÆ°ÁÆó',
                },
                {
                    text: 'Ë∑®Â≠¶Áßë/Ê∑∑Âêà/Êñ∞ÂÖ¥È¢ÜÂüü',
                    value: 'Ë∑®Â≠¶Áßë/Ê∑∑Âêà/Êñ∞ÂÖ¥È¢ÜÂüü',
                },
            ],
            onFilter: (value, record) => record.sub === value,
        },
        {
            title: 'üèÜCCF',
            dataIndex: 'ccfRank',
            key: 'ccfRank',
            align: 'center',
            // ÊçÆ‰∏çÂêåÁöÑÊù°‰ª∂Ê∏≤Êüì‰∏∫‰∏çÂêåÈ¢úËâ≤ÔºåÂêåÊó∂‰ΩøËØ•Ê†áÁ≠æÂ∏¶ÊúâÂúÜËßí
            render: (ccfRank) => {
                if (!ccfRank) return null; // Â¶ÇÊûú ccfRank ‰∏∫Á©∫ÔºåÂàô‰∏∫N

                let backgroundColor;
                switch (ccfRank) {
                    case 'A':
                        backgroundColor = 'red';
                        break;
                    case 'B':
                        backgroundColor = 'gold';
                        break;
                    case 'C':
                        backgroundColor = 'green';
                        break;
                    default:
                        backgroundColor = 'grey';
                        ccfRank = 'N'
                }
                return (
                    <Tag color={backgroundColor}>{ccfRank}</Tag>
                );
            },
            filters: [
                {
                    text: 'A',
                    value: 'A',
                },
                {
                    text: 'B',
                    value: 'B',
                },
                {
                    text: 'C',
                    value: 'C',
                },
            ],
            onFilter: (value, record) => record.ccfRank === value,
        },
        {
            title: '‚ùìÂª∂Êúü',
            dataIndex: 'isPostponed',
            key: 'isPostponed',
            align: 'center',
            render: (isPostponed) => {
                if (isPostponed) { // Â¶ÇÊûúÂª∂Êúü
                    return <Tag color='red'>Âª∂Êúü</Tag>
                    // <span style={{ backgroundColor: 'red', padding: '5px', borderRadius: '5px' }}>Âª∂Êúü</span>
                }
            }
        },
        {
            title: '‚è∞ÊëòË¶ÅÊà™Ê≠¢Êó•Êúü',
            dataIndex: 'abstractDeadline',
            key: 'abstractDeadline',
            align: 'center',
            render: date => date && <span>{moment(new Date(date)).format('YYYY-MM-DD')}</span>
        },
        {
            title: 'üîîÂÖ®ÊñáÊà™Ê≠¢Êó•Êúü',
            dataIndex: 'paperDeadline',
            key: 'paperDeadline',
            align: 'center',
            render: date => date && <span>{moment(new Date(date)).format('YYYY-MM-DD')}</span>
        },
        {
            title: 'üìÖÂºÄÂßãÊó∂Èó¥',
            dataIndex: 'startTime',
            key: 'startTime',
            align: 'center',
            sorter: (a, b) => {
                const dateA = a.startTime ? moment(new Date(a.startTime)).format('YYYY-MM-DD') : '';
                const dateB = b.startTime ? moment(new Date(b.startTime)).format('YYYY-MM-DD') : '';
                return dateA.localeCompare(dateB, undefined, { numeric: true });
            },
            render: (date) => date && <span>{moment(new Date(date)).format('YYYY-MM-DD')}</span>,
        },
        {
            title: 'üìÜÁªìÊùüÊó∂Èó¥',
            dataIndex: 'endTime',
            key: 'endTime',
            align: 'center',
            sorter: (a, b) => {
                const dateA = a.endTime ? moment(new Date(a.endTime)).format('YYYY-MM-DD') : '';
                const dateB = b.endTime ? moment(new Date(b.endTime)).format('YYYY-MM-DD') : '';
                return dateA.localeCompare(dateB, undefined, { numeric: true });
            },
            render: date => date && <span>{moment(new Date(date)).format('YYYY-MM-DD')}</span>
        },
        {
            title: 'üìçÂú∞ÁÇπ',
            dataIndex: 'place',
            key: 'place',
            align: 'center',
            render: place => <span>{place}</span>,
        },
        {
            title: 'üîñÊé•ÂèóÁéá',
            dataIndex: 'acceptedRate',
            key: 'acceptedRate',
            align: 'center',
            sorter: (a, b) => {
                if (a.acceptedRate === null || a.acceptedRate === undefined) return 1;
                if (b.acceptedRate === null || b.acceptedRate === undefined) return -1;
                return a.acceptedRate - b.acceptedRate;
            },
            render: acceptedRate => acceptedRate ? <span>{acceptedRate * 100 + '%'}</span> : <></>
        }
    ];

    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");

    // ÂÅáËÆæÁöÑÁ≠õÈÄâÂáΩÊï∞
    const filterData = (start, end) => {
        return conferences.filter(item => {
            const startTime = new Date(item.startTime)
            const endTime = new Date(item.endTime)
            // console.log(startTime)
            // console.log(endTime)
            return (
                (!start || startTime >= start) &&
                (!end || endTime <= end)
            );
        });
    };

    const handleDateChange = (field, value) => {
        console.log(value);
        let newDate = value; // Â∞ÜÊó•ÊúüÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫DateÂØπË±°
        // Ê£ÄÊü•Êó•ÊúüÊúâÊïàÊÄß
        if (field === 'startDate') {
            if (endDate && newDate >= endDate) {
                alert('ÁªìÊùüÊó•Êúü‰∏çËÉΩÂ∞è‰∫éÂºÄÂßãÊó•ÊúüÔºÅ');
                return; // Â¶ÇÊûúÂºÄÂßãÊó•ÊúüÂ§ß‰∫éÁªìÊùüÊó•ÊúüÔºå‰∏çÊõ¥Êñ∞Áä∂ÊÄÅÂπ∂ÈÄÄÂá∫ÂáΩÊï∞
            }
            setStartDate(value);
            console.log(value);
        } else if (field === 'endDate') {
            if (newDate < startDate) {
                message.error('ÁªìÊùüÊó•Êúü‰∏çËÉΩÂ∞è‰∫éÂºÄÂßãÊó•ÊúüÔºÅ');
                return;
            }
            setEndDate(value);
            console.log(endDate);
        }
        // ÈáçÊñ∞Á≠õÈÄâÊï∞ÊçÆ
        const filteredData = filterData(startDate, endDate);
        setConferences(filteredData);
    };

    return (
        <div>
            <h3 className='info'>CCF Conferences</h3>
            <div>
                <Form className='filter-right' layout="inline">
                    <Form.Item label="ÂºÄÂßãÊó∂Èó¥">
                        <DatePicker
                            value={startDate}
                            onChange={(value) => handleDateChange('startDate', value)}
                        />
                    </Form.Item>
                    <Form.Item label="ÁªìÊùüÊó∂Èó¥">
                        <DatePicker
                            value={endDate}
                            onChange={(value) => handleDateChange('endDate', value)}
                        />
                    </Form.Item>
                    <Form.Item >
                        <Button type="primary" onClick={() => setConferences(filterData(startDate, endDate))}>
                            Á≠õÈÄâ
                        </Button>
                        <Button style={{ marginLeft: "10px" }} type="primary" ghost onClick={() => setConferences(initialConferences)}>
                            ÈáçÁΩÆ
                        </Button>
                    </Form.Item>
                </Form>
                <Table columns={conferenceCols} dataSource={conferences} style={{ margin: 16 }} pagination={paginationProps} />
            </div>
        </div>
    );
}

export default ConferenceInfo;